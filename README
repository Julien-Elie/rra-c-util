                              rra-c-util 3.0
                 (Russ Allbery's utility libraries for C)

                Written by Russ Allbery <rra@stanford.edu>

  Copyright 2000, 2009, 2010 Russ Allbery <rra@stanford.edu>.  Copyright
  2009, 2010 Board of Trustees, Leland Stanford Jr. University.  This
  software is distributed under a BSD-style license.  Please see the file
  LICENSE in the distribution for more information.

BLURB

  rra-c-util is my collection of portability functions, utility functions,
  Autoconf macros, and related shared C infrastructure, akin to gnulib but
  without any GPL-covered code and additional support for Kerberos and PAM
  development.  It serves as a common repository of code and
  infrastructure used across multiple projects so that files have a
  canonical latest version.  It's not intended for installation as a
  regular package; instead, other packages are expected to copy files from
  here as needed.

DESCRIPTION

  The origins of this package are in the libinn utility library in INN.
  Some of the utility and portability functions here are directly inspired
  by or based on versions in older versions of INN, and I wrote and
  rewrote considerable additional portability code and utility libraries
  when I took over INN maintenance.  When I started maintaining other C
  packages, I started copying pieces of libinn into those packages and
  merging it with other portability and utility code.  Over time, each
  package gained a slightly different version of various utility
  functions, replacements for missing functions, and Autoconf macros.

  The goal of this package is to merge all the various versions of any
  portability or utility code that's used in more than one of my packages
  in one place.  Then, each package can update to the latest rra-c-util
  version before each release and gain from the improvements made for all
  other packages.

  This package uses the infrastructure of C TAP Harness for testing, but
  is not the canonical version of tests/runtests.c or tests/tap/*.  Those
  files should be pulled from C TAP Harness instead.

REQUIREMENTS

  Everything requires a C compiler to build and expects an ISO C89 or
  later C compiler and libraries.

  A Kerberos library, either MIT Kerberos or Heimdal, is required since
  the Kerberos portability layer is built and tested by default.  The kafs
  portability layer is also built by default, which on Linux requires the
  kafs library that comes with either Heimdal or KTH Kerberos, AFS header
  files (on any other platform besides AIX or IRIX), or AFS libraries (on
  AIX and IRIX).  The other code will run fine without those requirements.

  To enable tests that may be sensitive to the local environment or that
  produce a lot of false positives without uncovering many problems, set
  RRA_MAINTAINER_TESTS to a true value.

  To bootstrap from a Git checkout, or if you change the Automake files
  and need to regenerate Makefile.in, you will need Automake 1.11 or
  later.  For bootstrap or if you change configure.ac or any of the m4
  files it includes and need to regenerate configure or config.h.in, you
  will need Autoconf 2.64 or later.

BUILDING AND TESTING

  You can build rra-c-util and run its internal test suite with:

      ./configure
      make
      make check

  Pass --enable-silent-rules to configure for a quieter build (similar to
  the Linux kernel).  Use make warnings instead of make to build with full
  GCC compiler warnings (requires a relatively current version of GCC).

  Normally, configure will use krb5-config to determine the flags to use
  to compile with your Kerberos libraries.  If krb5-config isn't found, it
  will look for the standard Kerberos libraries in locations already
  searched by your compiler.  If the the krb5-config script first in your
  path is not the one corresponding to the Kerberos libraries you want to
  use or if your Kerberos libraries and includes aren't in a location
  searched by default by your compiler, you need to specify
  --with-krb5=PATH:

      ./configure --with-krb5=/usr/pubsw

  You can also individually set the paths to the include directory and the
  library directory with --with-krb5-include and --with-krb5-lib.  You may
  need to do this if Autoconf can't figure out whether to use lib, lib32,
  or lib64 on your platform.  Note that these settings aren't used if a
  krb5-config script is found.

  To specify a particular krb5-config script to use, either set the
  KRB5_CONFIG environment variable or pass it to configure like:

      ./configure KRB5_CONFIG=/path/to/krb5-config

  To not use krb5-config and force library probing even if there is a
  krb5-config script on your path, set KRB5_CONFIG to a nonexistent path:

      ./configure KRB5_CONFIG=/nonexistent

  If a test fails, you can run a single test with verbose output via:

      tests/runtests -o <name-of-test>

  Do this instead of running the test program directly since it will
  ensure that necessary environment variables are set up.

USING THIS CODE

  While there is an install target, it's present only because Automake
  provides it automatically and it doesn't do anything useful.  Instead,
  the code in this package is intended to be copied into your package and
  refreshed from the latest release of rra-c-util for each release.

  You can obviously copy the code and integrate it however works best for
  your package and your build system.  Here's how I do it for my packages
  as an example:

  * Create a portable directory and copy macros.h, system.h, stdbool.h,
    and dummy.c along with whatever additional functions that your package
    uses that may not be present on all systems.  If you use much of the
    util directory (see below), you'll need asprintf.c, snprintf.c,
    strlcat.c, and strlcpy.c at least.  If you use util/network.c, you'll
    also need getaddrinfo.c, getaddrinfo.h, getnameinfo.c, getnameinfo.h,
    inet_*.c, and socket.h.

  * Copy the bulk of configure.ac from this package into your package.
    configure.ac is commented to try to give you a guide for what you need
    to copy over.  You will also need to make an m4 subdirectory, add the
    code to configure.ac to load Autoconf macros from m4, and copy over
    m4/snprintf.m4 and possibly m4/socket.m4 and m4/inet-ntoa.m4.

  * Copy the code from Makefile.am for building libportable.a into your
    package and be sure to link your package binaries with libportable.a.
    If you include this code in a shared library, you'll need to build
    libportable.la instead; see the Automake manual for the differences.
    You'll need to use LTLIBRARIES and LTLIBOBJS in addition to renaming
    the targets.

  * Create a util directory and copy over the portions of the utility
    library that you want.  You will probably need messages.[ch] and
    xmalloc.[ch] if you copy anything over at all, since most of the rest
    of the library uses those.

  * If you're using the Kerberos portability code, copy over
    portable/krb5.h, portable/krb5-extra.c, m4/krb5.m4, m4/lib-depends.m4,
    m4/lib-pathname.m4, and optionally util/messages-krb5.[ch].  You'll
    also need the relevant fragments of configure.ac.  Also see the
    kerberos.* libraries in tests/tap for a Kerberos test suite.  You may
    want to remove some things from krb5.h and krb5-extra.c the
    corresponding configure checks if your code doesn't need all of those
    functions.  If you need krb5_get_renewed_creds, also copy over
    krb5-renew.c.

  * If you're using the kafs portability code, copy over the kafs
    directory, m4/kafs.m4, m4/lib-pathname.m4, the code to build kafs from
    Makefile.am, and the relevant fragments of configure.ac.

  * If you're using the PAM portability code, copy over portable/pam*,
    m4/pam-const.m4, and the relevant fragments of configure.ac.

  * Copy m4/vamacros.m4 to your package if you use the messages utility
    functions.

  * Copy the code from Makefile.am for building libutil.a into your
    package and be sure to link your package binaries with libutil.a.  As
    with libportable.a, if you want to use the utility functions in a
    shared library, you'll need to instead build libutil.la.

  * Copy over any other Autoconf macros that you want to use in your
    package.

  I also copy over all the relevant tests from the tests directory and the
  build machinery for them from Makefile.am so that the portability and
  utility layer are tested along with the rest of the package.  The test
  driver should come from C TAP Harness.

HOMEPAGE AND SOURCE REPOSITORY

  The rra-c-util web page at:

      http://www.eyrie.org/~eagle/software/rra-c-util/

  will always have the current version of this package, the current
  documentation, and pointers to any additional resources.

  rra-c-util is maintained using Git.  You can access the current source
  by cloning the repository at:

      git://git.eyrie.org/devel/rra-c-util.git

  or view the repository via the web at:

      http://git.eyrie.org/?p=devel/rra-c-util.git
