#!/usr/bin/perl
#
# Check URLs in source files.
#
# Examine all source files in a distribution for bad URL patterns and report
# on files that fail this check.  Currently, this just checks that all the
# links to www.eyrie.org are https.
#
# The canonical version of this file is maintained in the rra-c-util package,
# which can be found at <https://www.eyrie.org/~eagle/software/rra-c-util/>.
#
# Copyright 2016 Russ Allbery <eagle@eyrie.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

use 5.006;
use strict;
use warnings;

use lib "$ENV{C_TAP_SOURCE}/tap/perl";

use Test::More;
use Test::RRA qw(skip_unless_author);
use Test::RRA::Automake qw(all_files automake_setup);

# Bad URL patterns to search for.
my @BAD_URLS = qw(http://www.eyrie.org/);

# Only run this test for the package author, since it doesn't indicate any
# user-noticable flaw in the package itself.
skip_unless_author('Documentation URL tests');

# Set up Automake testing.
automake_setup();

# Scan every file for any of the bad URL patterns, although be careful to
# exclude this test file.
my @files = grep { -T && $_ ne 'tests/docs/urls-t' } all_files();
plan tests => scalar(@files);
FILE: for my $file (@files) {
    open(my $fh, '<', $file) or BAIL_OUT("Cannot open $file");
    while (defined(my $line = <$fh>)) {
        for my $url (@BAD_URLS) {
            if (index($line, $url) != -1) {
                ok(0, "$file contains $url");
                close($fh) or BAIL_OUT("Cannot close $file");
                next FILE;
            }
        }
    }
    close($fh) or BAIL_OUT("Cannot close $file");
    ok(1, $file);
}
